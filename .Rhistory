column(9,
plotlyOutput("bivnorm", height = 600)
)
)
),
tabPanel("Wishart",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
),
tabPanel("Uniform",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
)
),
tabPanel("Version",
fluidRow(
column(8, offset = 2,
h1("Densy", align = "center"),
h4("an application for distribution visualisations",
align = "center"
),
hr(),
includeMarkdown("version.txt"))
)
),
windowTitle = "Densy",
collapsible = TRUE
)
))
shinyServer(function(input, output) {
output$beta <- renderPlotly({
x <- seq(0, 1, length = 1000)
density <- dbeta(x, shape1 = input$sh1, shape2 = input$sh2)
p <- plot_ly(x = x, y = density, name = "Beta Distribution")
if (input$cib == T){
p <- add_trace(x = c(qbeta((1 - input$cinb)/2, shape1 = input$sh1,
shape2 = input$sh2),
qbeta((1 - input$cinb)/2, shape1 = input$sh1,
shape2 = input$sh2)),
y= c(0, max(density)), mode = "lines",
name = paste("CI lower bound: ", (1 - input$cinb)/2)) %>%
add_trace(x = c(qbeta(0.5 + (input$cinb)/2, shape1 = input$sh1, shape2 = input$sh2),
qbeta(0.5 + (input$cinb)/2, shape1 = input$sh1, shape2 = input$sh2)),
y= c(0, max(density)), mode = "lines",
name = paste("CI upper bound: ",
0.5 + (input$cinb)/2)) %>%
layout(annotations = list(list(x = qbeta(0.5 + (input$cinb)/2,
shape1 = input$sh1,
shape2 = input$sh2
),
y = max(density)*0.75,
text = round(qbeta(0.5 + (input$cinb)/2,
shape1 = input$sh1,
shape2 = input$sh2), 2),
showarrow = T,
arrowhead = 7,
ax = 20,
ay = 0),
list(x = qbeta((1 - input$cinb)/2,
shape1 = input$sh1,
shape2 = input$sh2),
y = max(density)*0.75,
text = round(qbeta((1 - input$cinb)/2,
shape1 = input$sh1,
shape2 = input$sh2), 2),
showarrow = T,
arrowhead = 7,
ax = -20,
ay = 0)))
}
l <- layout(p = p, font = list(family = "sans-serif", size = 12))
})
output$binom <- renderPlotly({
x <- seq(0, input$nb)
density <- dbinom(x, size = input$nb, prob = input$thb)
p <- plot_ly(x = x, y = density, name = "Binomial Distribution")
if (input$cibi == T){
p <- add_trace(x = c(qbinom((1 - input$cinbi)/2, size = input$nb,
prob = input$thb),
qbinom((1 - input$cinbi)/2, size = input$nb,
prob = input$thb)),
y= c(0, max(density)), mode = "lines",
name = paste("CI lower bound: ",
(1 - input$cinbi)/2)) %>%
add_trace(x = c(qbinom(0.5 + (input$cinbi)/2, size = input$nb,
prob = input$thb),
qbinom(0.5 + (input$cinbi)/2, size = input$nb,
prob = input$thb)),
y= c(0, max(density)), mode = "lines",
name = paste("CI upper bound: ", 0.5 + (input$cinbi)/2)) %>%
layout(annotations = list(list(x = qbinom(0.5 + (input$cinbi)/2,
size = input$nb,
prob = input$thb
),
y = max(density)*0.75,
text = round(qbinom(0.5 +
(input$cinbi)/2,
size = input$nb,
prob = input$thb),
2),
showarrow = T,
arrowhead = 7,
ax = 20,
ay = 0),
list(x = qbinom((1 - input$cinbi)/2,
size = input$nb,
prob = input$thb),
y = max(density)*0.75,
text = round(qbinom((1 - input$cinbi)/2,
size = input$nb,
prob = input$thb),
2),
showarrow = T,
arrowhead = 7,
ax = -20,
ay = 0)))
}
l <- layout(p = p, font = list(family = "sans-serif", size = 12))
})
output$uninorm <- renderPlotly({
x <- seq(input$mean - 5, input$mean + 5, length = 1000)
density <- dnorm(x, mean = input$mean, sd = input$sd)
p <- plot_ly(x = x, y = density, name = "Normal Distribution")
if (input$ci == T){
p <- add_trace(x = c(qnorm((1 - input$cin)/2, mean = input$mean,
sd = input$sd),
qnorm((1 - input$cin)/2, mean = input$mean,
sd = input$sd)),
y= c(0, max(density)), mode = "lines",
name = paste("CI lower bound: ", (1 - input$cin)/2)) %>%
add_trace(x = c(qnorm(0.5 + (input$cin)/2, mean = input$mean,
sd = input$sd),
qnorm(0.5 + (input$cin)/2, mean = input$mean,
sd = input$sd)),
y= c(0, max(density)), mode = "lines",
name = paste("CI upper bound: ", 0.5 + (input$cin)/2)) %>%
layout(annotations = list(list(x = qnorm(0.5 + (input$cin)/2,
mean = input$mean,
sd = input$sd),
y = max(density)*0.75,
text = round(qnorm(0.5 + (input$cin)/2,
mean = input$mean,
sd = input$sd), 2),
showarrow = T,
arrowhead = 7,
ax = 20,
ay = 0),
list(x = qnorm((1 - input$cin)/2,
mean = input$mean,
sd = input$sd),
y = max(density)*0.75,
text = round(qnorm((1 - input$cin)/2,
mean = input$mean,
sd = input$sd), 2),
showarrow = T,
arrowhead = 7,
ax = -20,
ay = 0)))
}
l <- layout(p = p, font = list(family = "sans-serif", size = 12))
})
output$stut <- renderPlotly({
x <- seq(input$ncp - 20, input$ncp + 20, length = 4000)
density <- dt(x, df = input$df, ncp = input$ncp)
p <- plot_ly(x = x, y = density, name = "T Distribution")
if (input$cit == T){
p <- add_trace(x = c(qt((1 - input$cint)/2, df = input$df,
ncp = input$ncp),
qt((1 - input$cint)/2, df = input$df,
ncp = input$ncp)),
y= c(0, max(density)), mode = "lines",
name = paste("CI lower bound: ",
(1 - input$cint)/2)) %>%
add_trace(x = c(qt(0.5 + (input$cint)/2, df = input$df,
ncp = input$ncp),
qt(0.5 + (input$cint)/2, df = input$df,
ncp = input$ncp)),
y= c(0, max(density)), mode = "lines",
name = paste("CI upper bound: ",
0.5 + (input$cint)/2)) %>%
layout(annotations = list(list(x = qt(0.5 + (input$cint)/2,
df = input$df,
ncp = input$ncp),
y = max(density)*0.75,
text = round(qt(0.5 + (input$cint)/2,
df = input$df,
ncp = input$ncp), 2),
showarrow = T,
arrowhead = 7,
ax = 20,
ay = 0),
list(x = qt((1 - input$cint)/2,
df = input$df,
ncp = input$ncp),
y = max(density)*0.75,
text = round(qt((1 - input$cint)/2,
df = input$df,
ncp = input$ncp), 2),
showarrow = T,
arrowhead = 7,
ax = -20,
ay = 0)))
}
l <- layout(p = p, font = list(family = "sans-serif", size = 12),
xaxis = list(range = c(input$ncp - 5, input$ncp + 5)))
})
output$bivnorm <- renderPlotly({
if (input$prec == "High"){
p <- 100
}
else {
p <- 45
}
x <- seq(-3.5, 3.5, length = p)
y <- x
s <- input$s
c <- input$corr
f <- function(x,y){
1/(2*pi*s^2*sqrt(1-c^2)) *
exp(
-(
((x - mean(x))^2-
2*c*(x - mean(x))*(y - mean(y))+
(y - mean(y))^2)/s^2)
/(2*(1-c^2)))
}
density = outer(x, y, f)
density[is.na(density)] = 1
p <- plot_ly(x = x, y = y, z = density,
type = "surface", opacity = 1,
hoverinfo = "z",
colorscale = "Portland",
showscale = F,
lighting = list(ambient = 0.9,
diffuse = 0.7,
specular = 0.07,
roughness = 0.3,
fresnel = 0.2))
l <- layout(p = p, font = list(family = "sans-serif",
size = 12))
})
})
shinyUI(fluidPage(theme = "bootstrap.css",
footer = "(c) Erik-Jan van Kesteren",
navbarPage(title=div(img(src="logo.gif", height = 20),
"Densy // Visualise Distributions"),
tabPanel("About",
fluidRow(
column(8, offset = 2,
h1("Densy", align = "center"),
h4("an application for distribution visualisations",
align = "center"
),
hr(),
h2(img(src="logo2.gif", height = 50), align = "center"),
br(),
includeMarkdown("about.txt"))
)
),
navbarMenu("Univariate",
tabPanel("Beta",
fluidRow(
column(8, offset = 2,
h1("Beta", align = "center"),
hr(),
br()
)
),
fluidRow(
column(3,
sidebarPanel(
sliderInput("sh1", "Shape Parameter 1", min = 0, max = 20,
value = 1, step = 0.1),
sliderInput("sh2", "Shape Parameter 2", min = 0, max = 20,
value = 1, step = 0.1),
checkboxInput("cib", "Show Confidence Interval", FALSE),
conditionalPanel("input.cib == 1",
sliderInput("cinb", "Confidence Interval", min = 0.01,
max = 0.99, value = 0.95)),
width = 12
)
),
column(9,
plotlyOutput("beta")
)
)
),
tabPanel("Binomial",
fluidRow(
column(8, offset = 2,
h1("Binomial", align = "center"),
hr(),
br()
)
),
fluidRow(
column(3,
sidebarPanel(
sliderInput("nb", "Amount of Trials", min = 1, max = 100,
value = 1, step = 1),
sliderInput("thb", "Success Probability", min = 0, max = 1,
value = 0.5, step = 0.01),
checkboxInput("cibi", "Show Confidence Interval", FALSE),
conditionalPanel("input.cibi == 1",
sliderInput("cinbi", "Confidence Interval", min = 0.01,
max = 0.99, value = 0.95)),
width = 12
)
),
column(9,
plotlyOutput("binom")
)
)
),
tabPanel("Chi Square",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
),
tabPanel("F",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
),
tabPanel("Gamma",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
),
tabPanel("Logistic",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
),
tabPanel("Normal",
fluidRow(
column(8, offset = 2,
h1("Univariate Normal", align = "center"),
hr(),
br()
)
),
fluidRow(
column(3,
sidebarPanel(
sliderInput("mean", "Mean", min = -2.5, max = 2.5,
value = 0, step = 0.1),
sliderInput("sd", "Standard Deviation", min = 0.1,
max = 2.5, value = 1.0, step = 0.1),
checkboxInput("ci", "Show Confidence Interval", FALSE),
conditionalPanel("input.ci == 1",
sliderInput("cin", "Confidence Interval", min = 0.01,
max = 0.99, value = 0.95)),
width = 12
)
),
column(9,
plotlyOutput("uninorm")
)
)
),
tabPanel("Student's T",
fluidRow(
column(8, offset = 2,
h1("Student's T", align = "center"),
hr(),
br()
)
),
fluidRow(
column(3,
sidebarPanel(
sliderInput("df", "Degrees of Freedom", min = 1, max = 100,
value = 1, step = 1),
sliderInput("ncp", "Non-Centrality Parameter", min = -3,
max = 3, value = 0, step = 0.1),
checkboxInput("cit", "Show Confidence Interval", FALSE),
conditionalPanel("input.cit == 1",
sliderInput("cint", "Confidence Interval", min = 0.01,
max = 0.99, value = 0.95)),
width = 12
)
),
column(9,
plotlyOutput("stut")
)
)
),
tabPanel("Uniform",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
)
),
navbarMenu("Bivariate",
tabPanel("Normal",
fluidRow(
column(8, offset = 2,
h1("Bivariate Normal", align = "center"),
hr(),
br()
)
),
fluidRow(
column(3,
sidebarPanel(
sliderInput("corr", "Correlation", min = 0, max = 0.99, value = 0.3),
sliderInput("s", "Standard Deviation", min = 0.0,
max = 2.5, value = 1.0),
selectInput("prec", "Precision:", choices = c("Normal", "High")),
width = 12,
br(),
"Note: SD of X and Y are assumed equal.
High precision is slower."
)
),
column(9,
plotlyOutput("bivnorm", height = 600)
)
)
),
tabPanel("Wishart",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
),
tabPanel("Uniform",
fluidRow(
column(8, offset = 2,
h1("under construction", align = "center"),
br(),
hr(),
br(),
h1(img(src = "load.gif", height = 30, width = 30),
align = "center")
)
)
)
),
tabPanel("Version",
fluidRow(
column(8, offset = 2,
h1("Densy", align = "center"),
h4("an application for distribution visualisations",
align = "center"
),
hr(),
includeMarkdown("version.txt"))
)
),
windowTitle = "Densy",
collapsible = TRUE
)
))
